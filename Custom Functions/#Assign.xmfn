<?xml version="1.0" encoding="UTF-8"?><FMClipboard><Version><![CDATA[42062300]]></Version><Comment></Comment><SourceWindowName><![CDATA[Manage Custom Functions for “Anderson2X_data”]]></SourceWindowName><Class>XMFN</Class><ClipVersion>1</ClipVersion><ClipTimeStamp>3.491901e+9</ClipTimeStamp><ClipAuthor><![CDATA[darrenburgess]]></ClipAuthor><clipboardAsText><![CDATA[#Assign( parameters )]]></clipboardAsText><Clipboard><fmxmlsnippet type="FMObjectList"><CustomFunction id="2" functionArity="1" visible="True" parameters="parameters" name="#Assign"><Calculation>// This is a reserved function name. You can use this custom function as provided or change to your own. The following is the suggested function


/**
 * =====================================
 * #Assign ( parameters )
 *
 * PURPOSE:
 * 		#Assign ( parameters ) uses the output of the # ( name ; value ) function (or
 * 		the concatenated results from several #() calls) to declare and populate a
 * 		series of locally-scoped script variables. #Assign also handles native
 * 		Let() function formatting which limits dependancies on #() by other custom fuctions.
 *
 * RETURNS:
 * 		True (1) when parameters is a valid set of name-value pairs (which includes
 * 		the empty string); False (0) otherwise.
 *
 * PARAMETERS:
 * 		parameters: The (potentially Null) string of name-value pairs to parse into
 * 		variables.
 *
 * EXAMPLES:
 * 		#Assign (  # ( "name1"; "value1" ) ) //= True, and sets the variable $name1 with value "value1"
 * 		#Assign ( Null ) //= True, and sets no variables
 * 		#Assign ( "This is not a valid name-value pair string" ) //= False
 *
 * DEPENDENCIES: none
 *
 * NOTE:
 * 		To be accessible outside this function, variable declarations in parameters
 * 		must use the $- or $$-prefixed notation for FileMaker variables. This
 * 		function does not handle that for you.
 *
 * HISTORY:
 * 		MODIFIED on 2011-03-03 by matt@filemakermagazine.com to not use $void and
 * 		only include trailing $~ if parameters is non conforming to Let()
 * 		MODIFIED on 2010-10-04 by jeremy@kyologic.com to return explicit True or
 * 		False values indicating successful evaluation of the script result, and to
 * 		fit syntax inspired by a comment on standards.filemakermagazine.com by
 * 		Richard Dyce.
 * 		CREATED on 2010-03-13 by Jeremy Bante of Kyo Logic (jeremy@kyologic.com).
 * 		INSPIRED by an example in the FileMaker help documentation.
 *
 * REFERENCES:
 * 		Script Parameter Interface Best Practice: http://filemakerstandards.org/pages/viewpage.action?pageId=557462
 * =====================================
 */
 
Let (
	~evaluateString =
		"Let( [¶"
		&amp; parameters
		&amp; If ( Right ( parameters ; 1 ) = ";"
				or Right ( parameters ; 1 ) = ¶;
				"$~ = $~")  //terminating variable to keep semicolon-delimited sytax in parameters consistent
		&amp; "¶];¶"
		&amp; "True¶)";

	//end variable definitions

	If ( IsValidExpression ( ~evaluateString );
			Evaluate ( ~evaluateString );
		//else, ~evaluateString is not a valid expression...
		False
	)
)

/*
Unit tests
Accounting for both a native Let() format and the more
explicit formatting from #()

List(
#Assign ( # ( "foo" ; "bar" ) ); // using # without $
#Assign ( # ( "$foo" ; "bar" ) ); // using # with $
#Assign ( # ( "$foo" ; "bar" ) &amp; # ( "bar" ; "baz" ) ); // concatenated #()
#Assign ( List ( # ( "foo" ; "bar" ); # ( "$bar" ; "baz" ) ) ); // List with &amp; without $
#Assign ( "$foo = \"bar\"" ); // single line raw  Let declaration
#Assign ( "$foo = \"bar\";¶$bar = \"baz\""); // multi-line raw Let
)
*/</Calculation></CustomFunction></fmxmlsnippet></Clipboard><Picture></Picture></FMClipboard>